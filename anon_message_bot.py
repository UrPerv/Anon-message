from telegram import Update, InputMediaPhoto, InputMediaVideo, InputMediaAnimation
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
import os
from dotenv import load_dotenv
import time
import logging

SPAM_LIMIT =15
SPAM_INTERVAL = 10  # —Å–µ–∫—É–Ω–¥
BLOCK_DURATION = 18000  # —Å–µ–∫—É–Ω–¥ (1 —á–∞—Å)

# –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {chat_id: [timestamps]}
message_timestamps = {}
# –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫: {chat_id: block_until_timestamp}
blocked_users = {}

async def anti_spam(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    chat_id = update.message.chat_id
    now = time.time()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    if chat_id in blocked_users:
        if now < blocked_users[chat_id]:
            await update.message.reply_text("–í—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∑–∞ —Å–ø–∞–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return False
        else:
            del blocked_users[chat_id]

    timestamps = message_timestamps.get(chat_id, [])
    timestamps = [t for t in timestamps if now - t <= SPAM_INTERVAL]
    timestamps.append(now)
    message_timestamps[chat_id] = timestamps

    if len(timestamps) > SPAM_LIMIT:
        blocked_users[chat_id] = now + BLOCK_DURATION
        await update.message.reply_text("–í—ã –±—ã–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∑–∞ —Å–ø–∞–º.")
        return False

    return True


# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv("database.env")
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID"))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –°–ª–æ–≤–∞—Ä–∏
user_map = {}  # {–∞–Ω–æ–Ω–∏–º–Ω—ã–π_id: chat_id}
reverse_user_map = {}  # {chat_id: –∞–Ω–æ–Ω–∏–º–Ω—ã–π_id}
user_nicks = {}  # {–∞–Ω–æ–Ω–∏–º–Ω—ã–π_id: –Ω–∏–∫–Ω–µ–π–º}

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–ª—å–±–æ–º–æ–≤
pending_albums = {}  # {chat_id: {"media": [...], "timeout": int, "caption": str}}

ALBUM_TIMEOUT = 10  # –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è, —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å –∞–ª—å–±–æ–º, –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

def generate_anonymous_id() -> int:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ ID."""
    return len(user_map) + 1

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç–∏–∫. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–æ—ë –º–µ—Å—Ç–æ. –•—Ä—é~üê∑\n\n"
        "https://t.me/+IgBDGmBXimU3NzUy - —Å—Å—ã–ª–∫–∞ –Ω–∞ –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥.\n"
        "https://t.me/Anonimnoe_Soobchenie_bot - –∞–Ω–æ–Ω–∏–º–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –∏ –∞–¥–º–∏–Ω–æ–º."
    )

async def delete_me(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    if chat_id in reverse_user_map:
        anon_id = reverse_user_map.pop(chat_id)
        user_map.pop(anon_id, None)
        await update.message.reply_text("–í—ã —É–¥–∞–ª–µ–Ω—ã. –ê–¥–º–∏–Ω –±–æ–ª—å—à–µ –Ω–µ —Å–º–æ–∂–µ—Ç –≤–∞–º –Ω–∞–ø–∏—Å–∞—Ç—å.")
    else:
        await update.message.reply_text("–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω—ã.")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id

    if not await anti_spam(update, context):
        return

    if chat_id not in reverse_user_map:
        anonymous_id = generate_anonymous_id()
        user_map[anonymous_id] = chat_id
        reverse_user_map[chat_id] = anonymous_id

    else:
        anonymous_id = reverse_user_map[chat_id]

    if update.message.text:
        await context.bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=f"–ê–Ω–æ–Ω–∏–º #{anonymous_id}: {update.message.text}"
        )
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")

    elif update.message.media_group_id:
        if chat_id not in pending_albums:
            pending_albums[chat_id] = {"media": [], "timeout": None, "caption": None}

        media_group = pending_albums[chat_id]["media"]
        if update.message.caption:
            pending_albums[chat_id]["caption"] = update.message.caption

        if update.message.photo:
            media_group.append(InputMediaPhoto(update.message.photo[-1].file_id))
        elif update.message.video:
            media_group.append(InputMediaVideo(update.message.video.file_id))

        jobs = context.job_queue.get_jobs_by_name(f"album_{chat_id}")
        if jobs:
            jobs[0].schedule_removal()

        pending_albums[chat_id]["timeout"] = context.job_queue.run_once(
            send_album, ALBUM_TIMEOUT, chat_id=chat_id, name=f"album_{chat_id}", data=anonymous_id
        )

    else:
        if update.message.photo:
            await context.bot.send_photo(
                chat_id=ADMIN_CHAT_ID,
                photo=update.message.photo[-1].file_id,
                caption=f"–ê–Ω–æ–Ω–∏–º #{anonymous_id}: {update.message.caption or ''}"
            )
        elif update.message.video:
            await context.bot.send_video(
                chat_id=ADMIN_CHAT_ID,
                video=update.message.video.file_id,
                caption=f"–ê–Ω–æ–Ω–∏–º #{anonymous_id}: {update.message.caption or ''}"
            )
        elif update.message.voice:
            await context.bot.send_voice(
                chat_id=ADMIN_CHAT_ID,
                voice=update.message.voice.file_id,
                caption=f"–ê–Ω–æ–Ω–∏–º #{anonymous_id} –æ—Ç–ø—Ä–∞–≤–∏–ª –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
            )
        elif update.message.video_note:
            await context.bot.send_video_note(
                chat_id=ADMIN_CHAT_ID,
                video_note=update.message.video_note.file_id
            )
            await context.bot.send_message(
                chat_id=ADMIN_CHAT_ID,
                text=f"–ê–Ω–æ–Ω–∏–º #{anonymous_id} –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∏–¥–µ–æ –∫—Ä—É–∂–æ—á–µ–∫."
            )
        elif update.message.animation:
            await context.bot.send_animation(
                chat_id=ADMIN_CHAT_ID,
                animation=update.message.animation.file_id,
                caption=f"–ê–Ω–æ–Ω–∏–º #{anonymous_id}: {update.message.caption or ''}"
            )
        elif update.message.sticker:
            await context.bot.send_sticker(
                chat_id=ADMIN_CHAT_ID,
                sticker=update.message.sticker.file_id
            )
            await context.bot.send_message(
                chat_id=ADMIN_CHAT_ID,
                text=f"–ê–Ω–æ–Ω–∏–º #{anonymous_id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å—Ç–∏–∫–µ—Ä."
            )
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")

async def send_album(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    chat_id = job.chat_id
    anonymous_id = job.data

    if chat_id in pending_albums:
        media_group = pending_albums[chat_id]["media"]
        caption = pending_albums[chat_id].get("caption", f"–ê–Ω–æ–Ω–∏–º #{anonymous_id}")

        if media_group:
            for i in range(0, len(media_group), 10):
                chunk = media_group[i:i + 10]

                if i == 0 and caption:
                    if isinstance(chunk[0], InputMediaPhoto):
                        chunk[0] = InputMediaPhoto(media=chunk[0].media, caption=caption)
                    elif isinstance(chunk[0], InputMediaVideo):
                        chunk[0] = InputMediaVideo(media=chunk[0].media, caption=caption)
                    elif isinstance(chunk[0], InputMediaAnimation):
                        chunk[0] = InputMediaAnimation(media=chunk[0].media, caption=caption)

                await context.bot.send_media_group(
                    chat_id=ADMIN_CHAT_ID,
                    media=chunk
                )

            await context.bot.send_message(
                chat_id=ADMIN_CHAT_ID,
                text=f"–ê–Ω–æ–Ω–∏–º #{anonymous_id}  –æ—Ç–ø—Ä–∞–≤–∏–ª –∞–ª—å–±–æ–º."
            )
            await context.bot.send_message(
                chat_id=chat_id,
                text="–í–∞—à –∞–ª—å–±–æ–º –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!"
            )

        pending_albums.pop(chat_id, None)

async def handle_admin_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.chat_id != ADMIN_CHAT_ID:
        return

    if update.message.text.startswith("/a"):
        parts = update.message.text.split(" ", 2)
        if len(parts) < 3:
            await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /a [ID] [—Å–æ–æ–±—â–µ–Ω–∏–µ]")
            return

        try:
            anonymous_id = int(parts[1])
            response_message = parts[2]
        except ValueError:
            await update.message.reply_text("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
            return

        if anonymous_id in user_map:
            user_chat_id = user_map[anonymous_id]
            await context.bot.send_message(
                chat_id=user_chat_id,
                text=response_message
            )
        else:
            await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")

if __name__ == "__main__":
    if not ADMIN_CHAT_ID:
        raise ValueError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è ADMIN_CHAT_ID –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –≤ database.env.")

    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("delete_me", delete_me))
    app.add_handler(CommandHandler("a", handle_admin_response))
    app.add_handler(MessageHandler(filters.ALL & ~filters.COMMAND, handle_message))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()
